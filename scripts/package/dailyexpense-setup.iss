; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Daily Expense"
#define MyAppVersion "0.0.1"
#define MyAppPublisher "My Company, Inc."
#define MyAppURL "https://www.example.com/"
#define MyAppExeName "expense.exe"
#define RootDir "..\.."
#define DistDir "..\..\dist"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{56C7D80A-AAF2-4553-8D30-AD95C480C6DA}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
; Uncomment the following line to run in non administrative install mode (install for current user only).
PrivilegesRequired=lowest
OutputDir={#DistDir}
OutputBaseFilename=Dailyexpense-setup
SetupIconFile="{#RootDir}\media\logo\logo.ico"
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"
;Name: "armenian"; MessagesFile: "compiler:Languages\Armenian.isl"
;Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl"

;[Files]
;Source: "{#DistDir}\Dailyexpense\expense.exe"; DestDir: "{app}"; Flags: ignoreversion
;Source: "{#DistDir}\Dailyexpense\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Files]
Source: "{#DistDir}\Dailyexpense\bin\*"; DestDir: "{app}\bin"; Flags: ignoreversion
Source: "{#DistDir}\Dailyexpense\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs

;[Run]
;Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent
;This will create the service.
;Filename: "{app}\psql_install.cmd"; Description: "Register PostgreSQL Service"; Flags:runhidden; WorkingDir:"{app}"
; Don't show the command window
; Check the return code.  Non-zero means an error.


[Icons]
Name: "{group}\{cm:ProgramOnTheWeb,{#MyAppName}}"; Filename: "{#MyAppURL}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"


[Registry]
; Add {app}\bin to USER's PATH (during install)
Root: HKCU; Subkey: "Environment"; ValueType: expandsz; ValueName: "Path"; \
    ValueData: "{olddata};{app}\bin"; Flags: preservestringtype uninsdeletevalue

[Code]
type
  WPARAM = LongWord;
  LPARAM = LongInt;

const
  WM_SETTINGCHANGE = $001A;
  SMTO_ABORTIFHUNG = $0002;

  
function SendMessageTimeout(hWnd: HWND; Msg: UINT; wParam: WPARAM;
  lParam: LPARAM; fuFlags: UINT; uTimeout: UINT; out lpdwResult: DWORD): DWORD;
  external 'SendMessageTimeoutW@user32.dll stdcall';
  
procedure RefreshEnvironment;
var
  Env: Cardinal;
begin
  SendMessageTimeout(HWND_BROADCAST, WM_SETTINGCHANGE, 0,
    LPARAM(ExpandConstant('Environment')), SMTO_ABORTIFHUNG, 5000, Env);
end;

function SplitString(const S: String; Separator: Char): TArrayOfString;
var
  I, J, N: Integer;
begin
  N := 1;
  for I := 1 to Length(S) do
    if S[I] = Separator then
      Inc(N);

  SetArrayLength(Result, N);

  N := 0;
  J := 1;
  for I := 1 to Length(S) do
  begin
    if S[I] = Separator then
    begin
      Result[N] := Copy(S, J, I - J);
      J := I + 1;
      Inc(N);
    end;
  end;
  Result[N] := Copy(S, J, Length(S) - J + 1);
end;

// Remove our {app}\bin from PATH during uninstall
procedure RemoveFromPath;
var
  Path, NewPath, AppBin: string;
  I: Integer;
  Paths: TArrayOfString;
begin
  AppBin := ExpandConstant('{app}\bin');
  if not RegQueryStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', Path) then
    Exit;

  // Split the PATH by semicolon
  Paths := SplitString(Path, ';');
  NewPath := '';
  for I := 0 to GetArrayLength(Paths) - 1 do
  begin
    if CompareText(Paths[I], AppBin) <> 0 then
    begin
      if NewPath <> '' then
        NewPath := NewPath + ';';
      NewPath := NewPath + Paths[I];
    end;
  end;

  // Write the new cleaned PATH back
  RegWriteStringValue(HKEY_CURRENT_USER, 'Environment', 'Path', NewPath);
end;

// Hook into uninstall step
procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin
  if CurUninstallStep = usPostUninstall then
  begin
    RemoveFromPath;
    RefreshEnvironment;
  end;
end;

// Hook into install step
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if CurStep = ssPostInstall then
    RefreshEnvironment;
end;
